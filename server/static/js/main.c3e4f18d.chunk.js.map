{"version":3,"sources":["App.js","serviceWorkerRegistration.js","reportWebVitals.js","index.js"],"names":["App","React","useEffect","localId","peerIds","ws","wsConnection","WebSocket","peerConnections","initiator","onopen","e","console","log","onerror","error","onmessage","data","JSON","parse","type","id","ids","connect","signal","Object","keys","forEach","includes","destroy","length","peer","Peer","on","send","stringify","draw","onPeerData","canvas","document","querySelector","ctx","getContext","width","window","innerWidth","height","innerHeight","strokeStyle","lineJoin","lineCap","lineWidth","isDrawing","lastPoint","x","y","hue","Math","random","direction","handleMouseEvent","offsetX","offsetY","color","values","lastX","lastY","beginPath","moveTo","lineTo","stroke","addEventListener","preventDefault","className","isLocalhost","Boolean","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","onUpdate","onSuccess","catch","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById","URL","process","href","origin","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker","serviceWorkerRegistration"],"mappings":"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","file":"static/js/main.c3e4f18d.chunk.js","sourcesContent":["import Peer from \"simple-peer\";\nimport React from \"react\";\nimport \"./App.css\";\n\nfunction App() {\n  React.useEffect(() => {\n    // WS\n    const ws =\n      process.env.NODE_ENV !== \"production\"\n        ? \"wss:https://pico-rainbow.herokuapp.com\"\n        : \"ws:127.0.0.1:8081\";\n    const wsConnection = new WebSocket(ws, \"json\");\n    let localId;\n    let peerIds;\n    let peerConnections = {};\n    let initiator = false;\n    wsConnection.onopen = (e) => {\n      console.log(`wsConnection open to ${ws}`, e);\n    };\n    wsConnection.onerror = (e) => {\n      console.error(`wsConnection error `, e);\n    };\n    wsConnection.onmessage = (e) => {\n      let data = JSON.parse(e.data);\n      switch (data.type) {\n        case \"connection\":\n          localId = data.id;\n          break;\n        case \"ids\":\n          peerIds = data.ids;\n          connect();\n          break;\n        case \"signal\":\n          signal(data.id, data.data);\n          break;\n        default:\n          console.log(e);\n          break;\n      }\n    };\n    const broadcast = (data) => {\n      Object.values(peerConnections).forEach((peer) => {\n        try {\n          peer.send(data);\n        } catch (e) {}\n      });\n    };\n    const signal = (id, data) => {\n      if (peerConnections[id]) {\n        peerConnections[id].signal(data);\n      }\n    };\n    function onPeerData(id, data) {\n      draw(JSON.parse(data));\n    }\n    const connect = () => {\n      // remove peer connections not in peer ids\n      Object.keys(peerConnections).forEach((id) => {\n        if (!peerIds.includes(id)) {\n          peerConnections[id].destroy();\n          delete peerConnections[id];\n        }\n      });\n      if (peerIds.length === 1) {\n        initiator = true;\n      }\n      peerIds.forEach((id) => {\n        if (id === localId) {\n          return;\n        }\n\n        if (peerConnections[id]) {\n          return;\n        }\n        let peer = new Peer({\n          initiator: initiator,\n        });\n\n        peer.on(\"error\", console.error);\n        peer.on(\"signal\", (data) => {\n          wsConnection.send(\n            JSON.stringify({\n              type: \"signal\",\n              id: localId,\n              data,\n            })\n          );\n        });\n        peer.on(\"connect\", () => {\n          console.log(`${localId} now connected to ${id}`);\n        });\n\n        peer.on(\"data\", (data) => {\n          onPeerData(id, data);\n        });\n\n        peerConnections[id] = peer;\n      });\n    };\n    // CANVAS API\n    const canvas = document.querySelector(\"#draw\");\n    const ctx = canvas.getContext(\"2d\");\n    canvas.width = window.innerWidth;\n    canvas.height = window.innerHeight;\n    ctx.strokeStyle = \"#BADA55\";\n    ctx.lineJoin = \"round\";\n    ctx.lineCap = \"round\";\n    ctx.lineWidth = 50;\n    let isDrawing = false;\n    let lastPoint = { x: 0, y: 0 };\n    let hue = Math.random() * 200;\n    console.log(hue);\n    let direction = true;\n\n    const handleMouseEvent = (e) => {\n      if (isDrawing) {\n        if (!lastPoint) {\n          lastPoint = { x: e.offsetX, y: e.offsetY };\n          return;\n        }\n\n        draw({\n          lastPoint,\n          x: e.offsetX,\n          y: e.offsetY,\n          color: hue,\n        });\n\n        broadcast(\n          JSON.stringify({\n            lastPoint,\n            x: e.offsetX,\n            y: e.offsetY,\n            color: hue,\n          })\n        );\n        lastPoint = { x: e.offsetX, y: e.offsetY };\n      }\n    };\n    const handleTouchEvent = (e) => {\n      const touches = e.changedTouches;\n      const _x = touches[0].clientX;\n      const _y = touches[0].clientY;\n      draw(_x, _y);\n    };\n\n    function draw(data) {\n      const { x, y, lastX, lastY, color } = data;\n      ctx.beginPath();\n      ctx.strokeStyle = `hsl(${color}, 100%, 50%)`;\n      ctx.moveTo(lastX, lastY);\n      ctx.lineTo(x, y);\n      ctx.stroke();\n\n      // hue++;\n      // if (hue >= 100) {\n      //   hue = 0;\n      // }\n\n      if (ctx.lineWidth >= 100 || ctx.lineWidth <= 20) {\n        direction = !direction;\n      }\n\n      if (direction) {\n        ctx.lineWidth++;\n      } else {\n        ctx.lineWidth--;\n      }\n\n      if (direction) {\n        hue+= 0.5;\n      } else {\n        hue-= 0.5;\n      }\n    }\n\n    // canvas.addEventListener(\"touchstart\", (e) => {\n    //   e.preventDefault();\n    //   const touches = e.changedTouches;\n    //   isDrawing = true;\n    //   lastX = touches[0].clientX;\n    //   lastY = touches[0].clientY;\n    // });\n    // canvas.addEventListener(\"touchmove\", (e) => handleTouchEvent(e));\n\n    canvas.addEventListener(\"mousedown\", (e) => {\n      e.preventDefault();\n      isDrawing = true;\n      canvas.addEventListener(\"mousemove\", handleMouseEvent);\n    });\n\n    canvas.addEventListener(\"mouseup\", () => (isDrawing = false));\n    canvas.addEventListener(\"touchend\", () => (isDrawing = false));\n    canvas.addEventListener(\"mouseout\", () => (isDrawing = false));\n    canvas.addEventListener(\"touchcancel\", () => (isDrawing = false));\n  });\n\n  // React.useEffect(() => {\n  // }, []);\n  return (\n    <div className=\"App\">\n      <canvas id=\"draw\" width=\"100vw\" height=\"100vh\"></canvas>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","const reportWebVitals = (onPerfEntry) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorkerRegistration.register();\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}